// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test enum service 1`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import Color from '../enum/Color'
import EnumService from './base/EnumService'

export default class EnumServiceImpl extends EnumService {
  async sayHello(color: Color): Promise<Color> {
    throw new Error('Method not implemented.')
  }
}
"
`;

exports[`test generic service 1`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import java from 'js-to-java'
import s from '@dubbo/sugar'
import { IUser } from '../../domain/User'
import Color from '../../enum/Color'

export default abstract class GenService {
  dubboInterface = 'org.apache.dubbo.service.GenService'
  group = 'dubbo'
  version = '1.0.0'

  methods = {
    sayHello: (name: Array<string>) => this.sayHello(name),
    sayWorld: async (user: Array<IUser>, color: Color) => {
      const res = await this.sayWorld(user, color)
      return s.$mhs(res)
    },
  }

  abstract sayHello(name: Array<string>): Promise<void>

  abstract sayWorld(
    user: Array<IUser>,
    color: Color
  ): Promise<Map<string, IUser>>
}
"
`;

exports[`test user service 1`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import { IUser } from '../domain/User'
import Color from '../enum/Color'
import UserService from './base/UserService'

/**
 * 用户服务
 */

export default class UserServiceImpl extends UserService {
  async sayHello(
    name: string,
    user: IUser,
    users: Array<IUser>
  ): Promise<string> {
    throw new Error('Method not implemented.')
  }

  async sayWorld(
    name: string,
    user: IUser,
    users: Array<IUser>
  ): Promise<IUser> {
    throw new Error('Method not implemented.')
  }

  async add(x: number, y: number): Promise<number> {
    throw new Error('Method not implemented.')
  }

  async getColor(color: Color): Promise<Color> {
    throw new Error('Method not implemented.')
  }

  async getUsers(): Promise<Array<IUser>> {
    throw new Error('Method not implemented.')
  }
}
"
`;

exports[`test user service 2`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import java from 'js-to-java'
import User, { IUser } from '../../domain/User'
import s from '@dubbo/sugar'
import Color from '../../enum/Color'

/**
 * 用户服务
 */

export default abstract class UserService {
  dubboInterface = 'org.apache.dubbo.service.UserService'
  group = 'dubbo'
  version = '1.0.0'

  methods = {
    sayHello: async (name: string, user: IUser, users: Array<IUser>) => {
      const res = await this.sayHello(name, user, users)
      return java.String(res)
    },
    sayWorld: async (name: string, user: IUser, users: Array<IUser>) => {
      const res = await this.sayWorld(name, user, users)
      return new User(res).__fields2java()
    },
    add: async (x: number, y: number) => {
      const res = await this.add(x, y)
      return java.int(res)
    },
    getColor: async (color: Color) => {
      const res = await this.getColor(color)
      return java.enum('org.apache.dubbo.enum.Color', Color[res])
    },
    getUsers: async () => {
      const res = await this.getUsers()
      return java.List(s.$lhs(res))
    },
  }

  abstract sayHello(
    name: string,
    user: IUser,
    users: Array<IUser>
  ): Promise<string>

  abstract sayWorld(
    name: string,
    user: IUser,
    users: Array<IUser>
  ): Promise<IUser>

  abstract add(x: number, y: number): Promise<number>

  abstract getColor(color: Color): Promise<Color>

  abstract getUsers(): Promise<Array<IUser>>
}
"
`;

exports[`test user service 3`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import { Dubbo, TDubboCallResult } from 'apache-dubbo-js'
import java from 'js-to-java'
import User, { IUser } from '../../domain/User'
import s from '@dubbo/sugar'
import Color from '../../enum/Color'

export interface IUserService {
  sayHello(
    name: string,
    user: IUser,
    users: Array<IUser>
  ): TDubboCallResult<string>

  sayWorld(
    name: string,
    user: IUser,
    users: Array<IUser>
  ): TDubboCallResult<IUser>

  add(x: number, y: number): TDubboCallResult<number>

  getColor(color: Color): TDubboCallResult<Color>

  getUsers(): TDubboCallResult<Array<IUser>>
}
/**
 * 用户服务
 */

export function UserService(dubbo: Dubbo): IUserService {
  return dubbo.proxyService<IUserService>({
    dubboInterface: 'org.apache.dubbo.service.UserService',
    methods: {
      sayHello(
        name: string,
        user: IUser,
        users: Array<IUser>
      ): TDubboCallResult<string> {
        return [
          java.String(name),
          new User(user).__fields2java(),
          java.List(s.$lhs(users)),
        ]
      },
      sayWorld(
        name: string,
        user: IUser,
        users: Array<IUser>
      ): TDubboCallResult<IUser> {
        return [
          java.String(name),
          new User(user).__fields2java(),
          java.List(s.$lhs(users)),
        ]
      },
      add(x: number, y: number): TDubboCallResult<number> {
        return [java.int(x), java.int(y)]
      },
      getColor(color: Color): TDubboCallResult<Color> {
        return [java.enum('org.apache.dubbo.enum.Color', Color[color])]
      },
      getUsers(): TDubboCallResult<Array<IUser>> {
        return []
      },
    },
  })
}
"
`;
